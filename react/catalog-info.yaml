apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.name | dump }}
  namespace: testing-services
  description: ${{ values.description | dump }}
  tags:
    - node
    - react
    - webapi
    - recommended  
  links:
    - url: https://github.com/${{values.destination.owner + "/" + values.destination.repo}}
      title: Repository
      icon: github

  annotations:
    # this could also be `url:<url>` if the documentation isn't in the same location
    # github.com/project-slug: ${{values.destination.owner + "/" + values.destination.repo}}
    backstage.io/techdocs-ref: dir:.
spec:
  type: service
  lifecycle: experimental
  owner: ${{ values.owner | dump }}
  system: ${{ values.system }}
  dependsOn: 
    - resource:basic-react
  apiConsumedBy: 
    - component:testing-services/testBackstage
  providesApis:
    - default/example-grpc-api
  definition: |
    openapi: 3.0.1
    info:
      title: test-react-app
      version: v1
    paths:
      /api/Health:
        get:
          tags:
            - Health
          responses:
            '200':
              description: Success
      /api/basic:
        get:
          tags:
            - Basic
          responses:
            '200':
              description: Success
              content:
                text/plain:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hero'
                application/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hero'
                text/json:
                  schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/Hero'
        post:
          tags:
            - Basic
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Hero'
              text/json:
                schema:
                  $ref: '#/components/schemas/Hero'
              application/*+json:
                schema:
                  $ref: '#/components/schemas/Hero'
          responses:
            '200':
              description: Success
              content:
                text/plain:
                  schema:
                    $ref: '#/components/schemas/Hero'
                application/json:
                  schema:
                    $ref: '#/components/schemas/Hero'
                text/json:
                  schema:
                    $ref: '#/components/schemas/Hero'
      /api/Hero/{id}:
        get:
          tags:
            - Hero
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: integer
                format: int32
          responses:
            '200':
              description: Success
              content:
                text/plain:
                  schema:
                    $ref: '#/components/schemas/Hero'
                application/json:
                  schema:
                    $ref: '#/components/schemas/Hero'
                text/json:
                  schema:
                    $ref: '#/components/schemas/Hero'
        put:
          tags:
            - Hero
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: integer
                format: int32
          requestBody:
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Hero'
              text/json:
                schema:
                  $ref: '#/components/schemas/Hero'
              application/*+json:
                schema:
                  $ref: '#/components/schemas/Hero'
          responses:
            '200':
              description: Success
        delete:
          tags:
            - Hero
          parameters:
            - name: id
              in: path
              required: true
              schema:
                type: integer
                format: int32
          responses:
            '200':
              description: Success
    components:
      schemas:
        Hero:
          required:
            - alterEgo
            - name
          type: object
          properties:
            id:
              type: integer
              format: int32
            name:
              minLength: 1
              type: string
            alterEgo:
              minLength: 1
              type: string
            description:
              type: string
              nullable: true
          additionalProperties: false
    